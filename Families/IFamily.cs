//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Family2Person.Families
{
    
    
    /// <summary>
    /// The public interface for Family
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Family))]
    [XmlDefaultImplementationTypeAttribute(typeof(Family))]
    [ModelRepresentationClassAttribute("platform:/plugin/Families/model/Families.ecore#//Family")]
    public interface IFamily : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Family")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The father property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("father")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("fatherInverse")]
        IFamilyMember Father
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mother property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("mother")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("motherInverse")]
        IFamilyMember Mother
        {
            get;
            set;
        }
        
        /// <summary>
        /// The sons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("sons")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("sonsInverse")]
        [ConstantAttribute()]
        IOrderedSetExpression<IFamilyMember> Sons
        {
            get;
        }
        
        /// <summary>
        /// The daughters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("daughters")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("daughtersInverse")]
        [ConstantAttribute()]
        IOrderedSetExpression<IFamilyMember> Daughters
        {
            get;
        }
        
        /// <summary>
        /// The familiesInverse property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("familiesInverse")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("families")]
        IFamilyRegister FamiliesInverse
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired before the Father property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FatherChanging;
        
        /// <summary>
        /// Gets fired when the Father property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FatherChanged;
        
        /// <summary>
        /// Gets fired before the Mother property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MotherChanging;
        
        /// <summary>
        /// Gets fired when the Mother property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MotherChanged;
        
        /// <summary>
        /// Gets fired before the FamiliesInverse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FamiliesInverseChanging;
        
        /// <summary>
        /// Gets fired when the FamiliesInverse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FamiliesInverseChanged;
    }
}

